pipeline {
    agent any

    environment {
        ACR_NAME = 'codecraftacr'
        AZURE_CREDENTIALS_ID = 'jenkins-pipeline-sp'
        ACR_LOGIN_SERVER = "${ACR_NAME}.azurecr.io"
        IMAGE_NAME = 'codecraft-api'
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        RESOURCE_GROUP = 'codecraft-resource-grp'
        AKS_CLUSTER = 'codecraft_aks'
        TF_WORKING_DIR = 'terraform'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/rani25lodha/CodeCraft'
            }
        }

        stage('Build .NET App') {
            steps {
                bat 'dotnet publish App/CodeCraftDemo/CodeCraftDemo/CodeCraftDemo.csproj -c Release -o App/CodeCraftDemo/CodeCraftDemo/out'

            }
        }

       stage('Build Docker Image') {
    steps {
        script {
            dir('App/CodeCraftDemo/CodeCraftDemo') {
                docker.build(
                    "${env.ACR_LOGIN_SERVER}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                )
            }
        }
    }
}



        stage('Terraform Init & Apply') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    bat """
                    cd %TF_WORKING_DIR%
                    terraform init
                    terraform apply -auto-approve
                    cd ..
                    """
                }
            }
        }

        stage('Login to ACR') {
            steps {
                bat "az acr login --name %ACR_NAME%"
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                bat """
                docker tag %ACR_LOGIN_SERVER%/%IMAGE_NAME%:%IMAGE_TAG% %ACR_LOGIN_SERVER%/%IMAGE_NAME%:latest
                docker push %ACR_LOGIN_SERVER%/%IMAGE_NAME%:%IMAGE_TAG%
                docker push %ACR_LOGIN_SERVER%/%IMAGE_NAME%:latest
                """
            }
        }

        stage('Get AKS Credentials') {
            steps {
                bat "az aks get-credentials --resource-group %RESOURCE_GROUP% --name %AKS_CLUSTER% --overwrite-existing"
            }
        }

        stage('Deploy to AKS') {
            steps {
                bat """
                kubectl apply -f k8s/deployment.yaml
                kubectl apply -f k8s/service.yaml
                """
            }
        }
    }

    post {
        success {
            echo '✅ All stages completed successfully!'
        }
        failure {
            echo '❌ Build failed.'
        }
    }
}
